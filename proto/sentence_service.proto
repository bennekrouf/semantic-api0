syntax = "proto3";

package sentence;

service SentenceService {
  rpc AnalyzeSentence (SentenceRequest) returns (stream SentenceResponse) {}
  rpc SendMessage (MessageRequest) returns (MessageResponse) {}  // Add this line
}

message SentenceRequest {
  string sentence = 1;
optional string conversation_id = 2;
}

message Parameter {
  string name = 1;
  string description = 2;
  optional string semantic_value = 3;
}

message Usage {
  uint32 input_tokens = 1;
  uint32 output_tokens = 2;
  uint32 total_tokens = 3;
  string model = 4;
  bool estimated = 5;
}

message SentenceResponse {
  string endpoint_id = 1;
  optional string endpoint_name = 2;
  string endpoint_description = 3;
  optional string verb = 4;
  optional string base = 5;
  optional string path = 6;
  optional string essential_path = 7;
  optional string api_group_id = 8;
  optional string api_group_name = 9;
  repeated Parameter parameters = 10;
  string json_output = 11;
  optional string conversation_id = 12;
  MatchingInfo matching_info = 13;
  optional string user_prompt = 14;
  optional Usage usage = 15;
}

message MessageRequest {
  string message = 1;
  optional string conversation_id = 2;
}

message MessageResponse {
  string response = 1;
  bool success = 2;
  optional string conversation_id = 3;
}

enum MatchingStatus {
  COMPLETE = 0;
  PARTIAL = 1;
  INCOMPLETE = 2;
}

message MissingField {
  string name = 1;
  string description = 2;
}

message MatchingInfo {
  MatchingStatus status = 1;  // Changed to enum
  int32 total_required_fields = 2;
  int32 mapped_required_fields = 3;
  int32 total_optional_fields = 4;
  int32 mapped_optional_fields = 5;
  float completion_percentage = 6;
  repeated MissingField missing_required_fields = 7;
  repeated MissingField missing_optional_fields = 8;
}

