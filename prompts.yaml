prompts:
  find_endpoint:
    versions:
      v1:
        template: |
          Given this reference sentence: '{input_sentence}'
          Compare it to these possible actions and identify which one most closely matches the core intent and meaning of the reference sentence:
          {actions_list}
          Determine the closest match by:
          1. Identifying the main verb/action in the reference sentence
          2. Extracting key elements (who, what, when, where, why, how)
          3. Comparing these elements to the fundamental purpose of each action option
          4. Selecting the action that best captures the essential meaning and purpose
          IMPORTANT: Output only the exact text of the single best matching action from the list.
          DO NOT use any markdown formatting or code blocks.
          DO NOT add any additional text or explanations.
          DO NOT wrap the response in quotes or backticks.
      v2:
        template: |
          Select the most semantically appropriate endpoint for this user input: "{input_sentence}"

          Available endpoints:
          {endpoints_list}

          Respond with ONLY the endpoint ID (nothing else).
          Consider the core intent and meaning, not just keywords.
          If no endpoint matches well, respond with "NO_MATCH".
    default_version: "v1"
    
  match_fields:
    versions:
      v1:
        template: |
          Given these input fields from a sentence: '{input_fields}'
          And these endpoint parameters:
          {parameters}

          For each endpoint parameter:
          1. Look at the input fields
          2. Find any field that matches the parameter or its alternatives
          3. Extract the actual value from the matching input field

          Return a JSON where:
          - Keys are the endpoint parameter names
          - Values are the actual values found in the input fields
          Only include parameters where you found a matching value.
          Return valid JSON only, no additional text.
      v2:
        template: |
          Map extracted fields to endpoint parameters using semantic understanding.
          
          Extracted fields: {input_fields}
          
          Target endpoint parameters:
          {parameters}
          
          Rules:
          1. Match fields to parameters based on semantic meaning, not just exact names
          2. Consider parameter alternatives and descriptions
          3. Transform values if needed to match expected format
          4. Only include parameters where you found a semantic match
          
          Return JSON mapping parameter names to their values:
          {{"parameter_name": "extracted_value"}}
      v3:
        template: |
          Perform semantic field mapping between extracted data and endpoint parameters.

          EXTRACTED DATA:
          {input_fields}

          ENDPOINT PARAMETERS:
          {parameters}

          MAPPING INSTRUCTIONS:
          1. Analyze each endpoint parameter and its description
          2. Look for semantically equivalent fields in the extracted data
          3. Consider common variations and synonyms
          4. Handle data format transformations when needed
          5. Use parameter alternatives if provided

          SEMANTIC MATCHING EXAMPLES:
          - "name" field → "person" parameter (if person expects name data)
          - "email_address" field → "to" parameter (if to expects email)
          - "subject_line" field → "subject" parameter
          - "message_content" field → "body" parameter
          - "recipient" field → "to" parameter

          FORMAT TRANSFORMATIONS:
          - If parameter expects JSON object but field has simple value, wrap appropriately
          - If parameter expects string but field has object, extract relevant string
          - Preserve original format when direct match is appropriate

          OUTPUT FORMAT:
          Return only valid JSON mapping parameter names to extracted values:
          {{"parameter_name": "transformed_value"}}

          Include only parameters where semantic mapping was successful.
          Do not include parameters with no semantic equivalent in the extracted data.
    default_version: "v3"

  sentence_to_json:
    versions:
      v1:
        template: |
          Sentence: {sentence}
          Task: Generate a precise, minimal JSON structure based strictly on the sentence.
          Rules:
          1. Create an 'endpoints' array with exactly the details from the sentence.
          2. Each endpoint must have:
             - Precise 'description' matching the sentence
             - 'fields' object where EACH key has its EXACT value from the sentence
          3. Do NOT invent additional endpoints or fields
          4. Generate only plain field with its value and not a value a field value as field and a boolean nested in
          5. Use the EXACT values found in the sentence for each field
          6. Output ONLY the valid JSON without ANY introduction sentence like here is the json
          7. Output ONLY the valid JSON without ANY explanation after outputing the json
          8. NEVER include trailing commas in the JSON output
          9. For single field objects, format like: {"field": "value"}  Example input: 'Send email to Alice at alice@example.com which title is New report and body is Hi Alice, here is the new report'
          Example output:
          Raw JSON string: {
            "endpoints": [
              {
                "id": "send_email",
                "description": "Server Down",
                "fields": {
                  "to": "alice@example.com",
                  "name": "Alice",
                  "title": "New report"
                  "content": "Hi Alice, \nhere is the new report."
                }
              }
            ]
          }
          Now for your sentence: {sentence}
      v2:
        template: |
          Extract parameter values from: "{sentence}"
          
          Target endpoint: {endpoint_description}
          Required parameters:
          {required_params}
          Optional parameters:
          {optional_params}
          
          Rules:
          1. Extract ONLY values for the listed parameters
          2. Use parameter names EXACTLY as provided
          3. If a parameter value isn't found, omit it completely
          4. Output valid JSON only: {{"param_name": "extracted_value"}}
          5. DO NOT include trailing commas
          6. DO NOT add explanatory text
          
          Sentence: {sentence}
    default_version: "v1"

  intent_classification:
    versions:
      v1:
        template: |
          Analyze this user input: "{sentence}"
          
          Available system actions:
          - {endpoints_list}
          
          Determine if the user wants to:
          1. ACTIONABLE: Perform a specific action using one of the available system functions
          2. GENERAL: Ask a general question, request information, or have a conversation
          
          Examples of ACTIONABLE requests (any language):
          - "Send an email to John or Envoyer un email à John"
          - "Schedule a meeting for tomorrow / Planifier une réunion pour demain"
          - "Create a support ticket / Créer un ticket de support"
          - "Generate CV for john-doe / Générer CV pour john-doe"
          
          Examples of GENERAL questions (any language):
          - "What is machine learning? / Qu'est-ce que l'apprentissage automatique?"
          - "How does email work? / Comment fonctionne l'email?"
          - "Tell me about your capabilities / Parlez-moi de vos capacités"
          
          The input "Générer CV pour john-doe en français" is clearly requesting CV generation action.
          Think through your reasoning, then respond with exactly one word which are either ACTIONABLE or GENERAL
      v2:
        template: |
          Analyze this user input: "{sentence}"
          
          Available system actions:
          - {endpoints_list}
          
          Determine if the user wants to:
          1. ACTIONABLE: Perform a specific action using one of the available system functions
          2. GENERAL: Ask a general question, request information, or have a conversation
          
          Examples of ACTIONABLE requests (any language):
          - "Send an email to John or Envoyer un email à John"
          - "Schedule a meeting for tomorrow / Planifier une réunion pour demain"
          - "Create a support ticket / Créer un ticket de support"
          - "Generate CV for john-doe / Générer CV pour john-doe"
          
          Examples of GENERAL questions (any language):
          - "What is machine learning? / Qu'est-ce que l'apprentissage automatique?"
          - "How does email work? / Comment fonctionne l'email?"
          - "Tell me about your capabilities / Parlez-moi de vos capacités"
          
          The input "Générer CV pour john-doe en français" is clearly requesting CV generation action.
          Think through your reasoning, then respond with exactly one word which are either ACTIONABLE or GENERAL
      v3:
        template: |
          Analyze this user input: "{sentence}"
          
          Available system capabilities:
          {endpoints_list}
          
          Classify the intent into exactly ONE of these categories:
          
          1. ACTIONABLE: User wants to perform a specific action using available system functions
          Examples (any language):
          - "Send an email to John" / "Envoyer un email à John"
          - "Schedule a meeting for tomorrow" / "Planifier une réunion pour demain"
          - "Create a support ticket" / "Créer un ticket de support"
          - "Generate CV for john-doe" / "Générer CV pour john-doe"
          
          2. HELP: User wants to know what actions are available or how to use the system
          Examples (any language):
          - "What can I do?" / "Que puis-je faire?"
          - "Help me" / "Aide-moi"
          - "Show me available options" / "Montre-moi les options disponibles"
          - "What actions are possible?" / "Quelles actions sont possibles?"
          - "How can I use this?" / "Comment puis-je utiliser ceci?"
          - "List capabilities" / "Lister les capacités"
          - "What features do you have?" / "Quelles fonctionnalités avez-vous?"
          
          3. GENERAL: General conversation, questions about topics not related to system actions
          Examples (any language):
          - "What is machine learning?" / "Qu'est-ce que l'apprentissage automatique?"
          - "How does email work?" / "Comment fonctionne l'email?"
          - "Tell me about the weather" / "Parlez-moi de la météo"
          - "Hello, how are you?" / "Bonjour, comment allez-vous?"
          
          Respond with exactly one word: ACTIONABLE, HELP, or GENERAL
    default_version: "v3"

  help_response:
    versions:
      v1:
        template: |
          The user asked for help: "{sentence}"
          Detected language: {detected_language}
          
          Available capabilities for this user:
          {endpoints_list}
          
          Generate a helpful response in the detected language ({detected_language}) that:
          1. Acknowledges their help request warmly
          2. Lists the available actions they can perform
          3. Provides 1-2 concrete examples for the most useful actions
          4. Encourages them to try these actions
          
          Language-specific guidelines:
          - en: Use friendly, professional English
          - fr: Use polite French with "vous" form, include appropriate French greetings
          - es: Use polite Spanish with "usted" form where appropriate
          - de: Use polite German with "Sie" form
          - it: Use polite Italian with "Lei" form
          - pt: Use polite Portuguese
          - Other languages: Use the most appropriate formal/polite register
          
          Keep the tone friendly, helpful, and concise. Match the user's detected language exactly.
          
          Examples by language:
          
          English (en):
          "I can help you with several actions! Here's what you can do:
          • Send emails with attachments
          • Schedule meetings and appointments  
          • Create support tickets for issues
          • Generate reports and documents
          
          For example, you could say 'Send an email to john@example.com about the meeting' or 'Schedule a meeting tomorrow at 2pm with the team'. What would you like to try?"
          
          French (fr):
          "Je peux vous aider avec plusieurs actions! Voici ce que vous pouvez faire:
          • Envoyer des emails avec des pièces jointes
          • Planifier des réunions et rendez-vous
          • Créer des tickets de support pour les problèmes
          • Générer des rapports et documents
          
          Par exemple, vous pourriez dire 'Envoyer un email à john@example.com concernant la réunion' ou 'Planifier une réunion demain à 14h avec l'équipe'. Que souhaitez-vous essayer?"
          
          Spanish (es):
          "¡Puedo ayudarle con varias acciones! Esto es lo que puede hacer:
          • Enviar emails con archivos adjuntos
          • Programar reuniones y citas
          • Crear tickets de soporte para problemas
          • Generar reportes y documentos
          
          Por ejemplo, podría decir 'Enviar un email a john@example.com sobre la reunión' o 'Programar una reunión mañana a las 2pm con el equipo'. ¿Qué le gustaría probar?"
          
          German (de):
          "Ich kann Ihnen mit verschiedenen Aktionen helfen! Hier ist, was Sie tun können:
          • E-Mails mit Anhängen senden
          • Meetings und Termine planen
          • Support-Tickets für Probleme erstellen
          • Berichte und Dokumente generieren
          
          Zum Beispiel könnten Sie sagen 'E-Mail an john@example.com über das Meeting senden' oder 'Meeting morgen um 14 Uhr mit dem Team planen'. Was möchten Sie ausprobieren?"
    default_version: "v1"

  extract_followup_parameters:
    versions:
      v1:
        template: |
          Extract parameter values from this follow-up message: "{sentence}"
          
          Look for patterns like:
          - "subject is Meeting Tomorrow" → {{"subject": "Meeting Tomorrow"}}
          - "body is Hi John, see you at 2pm" → {{"body": "Hi John, see you at 2pm"}}
          - "recipient is john@example.com" → {{"to": "john@example.com"}}
          - "anthony" → {{"person_name": "anthony"}} (when person name is expected)
          - "the person name is anthony" → {{"person_name": "anthony"}}
          - "jane" → {{"person_name": "jane"}} (single name responses)
          
          IMPORTANT: If the message is a single word or name without context, 
          and it matches common parameter types, extract it accordingly:
          - Single names likely represent person_name, name, or recipient
          - Email addresses likely represent to, email, or recipient_email
          - Numbers might represent amount, quantity, or id values
          - Dates/times represent date, time, or schedule parameters
          
          Extract natural parameter values from the user's response.
          Common parameter patterns:
          - Person identification: person_name, name, user_name, customer_name
          - Contact info: email, phone, address, to, from
          - Content: subject, body, message, description, title
          - Scheduling: date, time, participants, duration, topic, location
          - Transaction: amount, currency, method, recipient
          
          Return JSON object with parameter names as keys and extracted values as values.
          Only include parameters you can clearly identify from the text.
          If no clear parameters found, return empty object {{}}.
          
          Response must be valid JSON only, no explanatory text.
      v2:
        template: |
          Extract parameter values from this follow-up message: "{sentence}"
          
          Look for any identifiable data patterns:
          - Names or identifiers
          - Email addresses  
          - URLs or links
          - Numbers or amounts
          - Dates or times
          - Any other structured data
          
          For each piece of data you identify, determine the most likely parameter name:
          - Person names → "name", "person", "person_name"
          - Email addresses → "email", "to", "recipient" 
          - URLs → "url", "link", "job_url"
          - Numbers → "amount", "quantity", "id"
          - Dates → "date", "start_date", "end_date"
          - Times → "time", "start_time", "duration"
          
          Return JSON object mapping parameter names to extracted values.
          Only include clear, identifiable parameter extractions.
          
          Response must be valid JSON only, no explanatory text.
      v3:
        template: |
          Given this user message: "{sentence}"
          
          Map any values to these EXACT parameter names only:
          {available_parameters}
          
          Instructions:
          1. Identify any values in the user message
          2. Map each value to the most appropriate parameter from the list above
          3. Use ONLY the exact parameter names provided - no variations or synonyms
          4. If a value doesn't clearly map to any available parameter, omit it
          
          Examples:
          - If you see "anthony" and there's a parameter "person: person identifier", map it as {{"person": "anthony"}}
          - If you see "john@example.com" and there's a parameter "email: email address", map it as {{"email": "john@example.com"}}
          
          Return JSON with exact parameter names as keys and extracted values as values.
          Only include parameters that clearly match the available list.
          
          Response must be valid JSON only, no explanatory text.
    default_version: "v3"
  extract_followup_parameters_mapping:
    versions:
      v1:
        template: |
          Given this user message: "{sentence}"
          
          Map any values to these EXACT parameter names only:
          {available_parameters}
          
          Instructions:
          1. Identify any values in the user message
          2. Map each value to the most appropriate parameter from the list above
          3. Use ONLY the exact parameter names provided - no variations or synonyms
          4. If a value doesn't clearly map to any available parameter, omit it
          
          Examples:
          - If you see "anthony" and there's a parameter "person: person identifier", map it as {{"person": "anthony"}}
          - If you see "john@example.com" and there's a parameter "email: email address", map it as {{"email": "john@example.com"}}
          
          Return JSON with exact parameter names as keys and extracted values as values.
          Only include parameters that clearly match the available list.
          
          Response must be valid JSON only, no explanatory text.
    default_version: "v1"
